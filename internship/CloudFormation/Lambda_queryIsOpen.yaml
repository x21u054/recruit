AWSTemplateFormatVersion: '2010-09-09'

Resources:
  QueryIsOpenFunction:
    DependsOn: QueryIsOpenFunctionRole
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: queryIsOpenFunction_biz
      Handler: index.handler
      Role: !GetAtt QueryIsOpenFunctionRole.Arn
      Code:
        ZipFile: |
            import json
            import boto3
            import datetime
            import os
            import logging
            
            _logger = logging.getLogger()
            
            def lambda_handler(event, context):
                initLogger()

                # TODO implement
                #Amazon Connectからインスタンスとキューを取得
                _logger.info('Amazon Connectからインスタンスとキューを取得\n')
                data = event['Details']['ContactData']
                instanceArn = data['InstanceARN']
                _logger.info('InstanceARN : ' + instanceArn + '\n')
                
                #インスタンスIDを取得
                instanceId = instanceArn.split('/')[-1]
                _logger.info('instanceId : ' + instanceId + '\n')
                #AmazonConnectのAPIに接続
                connect = boto3.client('connect')
                connectResponse = connect.describe_instance(
                        InstanceId=instanceId
                    )
                #インスタンス名を取得
                instanceName = connectResponse['Instance']['InstanceAlias']
                _logger.info('instanceName : ' + instanceName + '\n')
                
                #キュー名を取得
                print(data)
                queue = data['Queue']['Name']
                _logger.info('Queue : ' + queue + '\n')
            
                #現在の日時と時刻を取得
                _logger.info('現在の日時と時刻を取得\n')
                currentTime = datetime.datetime.now()
                offset = datetime.timedelta(hours=9)
                currentTime += offset
                _logger.info('currentTime : ' + currentTime.strftime('%Y-%m-%d %H:%M:%S') + '\n')
                formattedTime = currentTime.strftime('%Y-%m-%d')
                _logger.info('formattedTime : ' + formattedTime + '\n')
                
                #現在の曜日を取得
                _logger.info('現在の日時と時刻を取得\n')
                dayOfWeekArray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                currentDayIndex = currentTime.weekday()
                currentDayOfWeek = dayOfWeekArray[currentDayIndex]
                _logger.info('currentDayOfWeek : ' + currentDayOfWeek + '\n')
            
                #DynamoDBからインスタンス、キュー、現在日時を基にレコードを取得
                _logger.info('DynamoDBからインスタンス、キュー、現在日時を基にレコードを取得\n')
                #テーブル名とパーティションキーのマッピング
                if instanceName == "インスタンス名":
                    tableName = 'テーブル名'
                    _logger.info('DynamoDBのテーブルとインスタンス名の紐づけに成功しました\n')
                else:
                    _logger.info('DynamoDBのテーブルとインスタンス名の紐づけに失敗しました\n')
                    return
                
                #キュー名とパーティションキーのマッピング
                if queue == "BasicQueue":
                    partitionKeyValue = 'BasicQueue'
                    _logger.info('DynamoDBのパーティションキーとキュー名の紐づけに成功しました\n')
                else:
                    _logger.info('DynamoDBのパーティションキーとキュー名の紐づけに失敗しました\n')
                    return       
                #DynamoDBのAPIへ接続
                dynamodb = boto3.client('dynamodb')
                _logger.info('tableName : ' + tableName + '\n')
                _logger.info('partitionKeyValue : ' + partitionKeyValue + '\n')
                sortKeyValue = formattedTime
                _logger.info('sortKeyValue : ' + sortKeyValue + '\n')
                response = dynamodb.query(
                    TableName=tableName,
                    ExpressionAttributeNames={
                          '#pk': 'queue',
                          '#sk': 'day'
                    },
                    ExpressionAttributeValues={
                        ':pk': {'S': partitionKeyValue},
                        ':sk': {'S': sortKeyValue}
                    },
                    KeyConditionExpression='#pk = :pk AND #sk = :sk'
                )
                items = response.get('Items', [])
                _logger.info('items : ' + json.dumps(items) + '\n')
            
                #該当するレコードがない場合
                if not items:
                    _logger.info('該当するレコードがありません\n')
                    #営業日と営業時間内か判定
                    if isBusinessDay(currentDayOfWeek) and isBusinessHours(currentTime):
                        _logger.info('if isBusinessDay(currentDayOfWeek) and isBusinessHours(currentTime): True\n')
                        return {
                            'keyIsOpen': True
                        }
                    else:
                        _logger.info('if isBusinessDay(currentDayOfWeek) and isBusinessHours(currentTime): False\n')
                        return {
                            'keyIsOpen': False
                        }
                #該当するレコードがある場合
                else:
                    _logger.info('該当するレコードがあります\n')
                    #営業日と営業時間内か判定
                    if isBusinessDay(currentDayOfWeek) and isBusinessHours(currentTime):
                        _logger.info('if isBusinessDay(currentDayOfWeek) and isBusinessHours(currentTime): True\n')
                        #DynamoDBから取得した値を基に営業日または営業時間内か判定
                        if rest(items, currentTime):
                            _logger.info('if rest(items, currentTime): True\n')
                            return {
                                'keyIsOpen': True
                            }
                        else:
                            _logger.info('if rest(items, currentTime): False\n')
                            return {
                                'keyIsOpen': False
                            }
                    else:
                        _logger.info('if isBusinessDay(currentDayOfWeek) and isBusinessHours(currentTime): False\n')
                        return {
                            'keyIsOpen': False
                        }
            
            #通常の営業日の曜日か判定
            def isBusinessDay(dayOfWeek):
                _logger.info('isBusinessDay(dayOfWeek): start\n')
                #環境変数を取得
                mondayValue = os.environ.get('Monday')
                tuesdayValue = os.environ.get('Tuesday')
                wednesdayValue = os.environ.get('Wednesday')
                thursdayValue = os.environ.get('Thursday')
                fridayValue = os.environ.get('Friday')
                saturdayValue = os.environ.get('Saturday')
                sundayValue = os.environ.get('Sunday')
                
                #現在の曜日の値を取得
                value = ''
                if dayOfWeek == 'Monday':
                    value = mondayValue
                elif dayOfWeek == 'Tuesday':
                    value = tuesdayValue
                elif dayOfWeek == 'Wednesday':
                    value = wednesdayValue
                elif dayOfWeek == 'Thursday':
                    value = thursdayValue
                elif dayOfWeek == 'Friday':
                    value = fridayValue
                elif dayOfWeek == 'Saturday':
                    value = saturdayValue
                elif dayOfWeek == 'Sunday':
                    value = sundayValue
                
                #値を判定
                if value.lower() == 'open':
                    _logger.info('if value == open: True\n')
                    return True
                elif value.lower() == 'close':
                    _logger.info('if value == close: False\n')
                    return False
                else:
                    _logger.info('環境変数の曜日の値は不正です\n')
                    return False
            
            #通常の営業時間内か判定
            def isBusinessHours(currentTime):
                _logger.info('isBusinessHours(currentTime): start\n')
                #環境変数を取得
                startTimeValue = os.environ.get('StartTime')
                endTimeValue = os.environ.get('EndTime')
                
                #営業時間のdatetimeオブジェクトを取得
                try:
                    startTimeObj = datetime.datetime.strptime(startTimeValue, '%H:%M')
                    endTimeObj = datetime.datetime.strptime(endTimeValue, '%H:%M')
                except ValueError:
                    _logger.info('環境変数の時間の値は不正です\n')
                    return False
                #営業時間内か判定
                return startTimeObj.time() <= currentTime.time() <= endTimeObj.time()
            
            #DynamoDBから取得した値を基に営業日または営業時間内か判定
            def rest(items, currentTime):
                _logger.info('rest(items, currentTime): start\n')
                #DynamoDBのレコード単位の処理
                for item in items:
                    #休日、臨時休業日の属性が存在する場合
                    if "isHoliday" in item or "isTempHoliday" in item:
                        return isBusinessDayForRest(item)
                    #臨時休業時間の属性が存在する場合
                    elif "startTempClosingTime" in item and "endTempClosingTime" in item:
                        return isBusinessHoursForRest(item, currentTime)
                    else:
                        _logger.info('DBの属性は不正です\n')
                        return False
            
            #休日又は臨時休業日を基に営業日か判定
            def isBusinessDayForRest(dataEntry):
                _logger.info('isBusinessDayForRest(dataEntry): start\n')
                #レコードから属性を取得
                isHoliday = dataEntry.get('isHoliday', {}).get('BOOL', False)
                isTempHoliday = dataEntry.get('isTempHoliday', {}).get('BOOL', False)
                
                #営業日か判定
                return not (isHoliday or isTempHoliday)
            
            #臨時休業時間を基に営業時間内か判定
            def isBusinessHoursForRest(dataEntry, currentTime):
                _logger.info('isBusinessHoursForRest(dataEntry, currentTime): start\n')
                #レコードから属性を取得
                startTimeStr = dataEntry.get("startTempClosingTime", {}).get("S")
                endTimeStr = dataEntry.get("endTempClosingTime", {}).get("S")
                
                if startTimeStr and endTimeStr:
                    #営業時間のdatetimeオブジェクトを取得
                    try:
                        startTimeObj = datetime.datetime.strptime(startTimeStr, '%H:%M')
                        endTimeObj = datetime.datetime.strptime(endTimeStr, '%H:%M')
                    except ValueError:
                        _logger.info('DBの時間に関連する属性の値は不正です\n')
                        return 
                    #営業時間内か判定
                    return not startTimeObj.time() <= currentTime.time() <= endTimeObj.time()
                else:
                    return False
            
            # 【Logger初期設定処理】
            # 【INPUT】 なし
            # 【OUTPUT】なし
            # 【処理概要】
            #　　loggerのLOGレベルとフォーマットを環境変数から設定する
            def initLogger():
                # 環境変数からLOG_LEVELを取得して設定する
                # 0:NOTSET 10:DEBUG 20:INFO 30:WARNING 40:ERROR 50:CRITICAL
                try:
                    wLogLevel = os.environ['LOG_LEVEL']
                except KeyError as err:
                    # LOG_LEVELが未定義の場合【INFO】を適用する
                    _logger.warning('LOG_LEVEL Not Configuration\n')
                    wLogLevel = '20'
                try:
                    iLogLevel = int(wLogLevel)
                except:
                    # LOG_LEVELが数字以外の場合【INFO】を適用する
                    _logger.warning('LOG_LEVEL Bad Configuration:' +wLogLevel +'\n')
                    iLogLevel = 20
                    
                _logger.setLevel(iLogLevel)
                
                # 環境変数からフォーマットを設定する
                try:
                    wLogFormat = os.environ['LOG_FORMAT']
                    formatter = logging.Formatter(
                        wLogFormat
                    )
                    for handler in _logger.handlers:
                        handler.setFormatter(formatter)
                except KeyError as err:
                    # LOG_FORMATが未定義の場合[%(levelname)s] %(message)sを適用する
                    _logger.warning('LOG_FORMAT Not Configuration\n')
                    wLogFormat = '[%(levelname)s] %(message)s'
                    formatter = logging.Formatter(
                        wLogFormat
                    )
                    for handler in _logger.handlers:
                        handler.setFormatter(formatter)
            
                return
      Runtime: python3.11
      Environment:
        Variables:
          Monday: "open"
          Tuesday: "open"
          Wednesday: "open"
          Thursday: "open"
          Friday: "open"
          Saturday: "close"
          Sunday: "close"
          StartTime: "10:00"
          EndTime: "18:30"
          LOG_LEVEL: "20"
          LOG_FORMAT: "[%(levelname)s] %(message)s"
  QueryIsOpenFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: queryIsOpenFunctionRole_biz
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  QueryIsOpenFunctionRolePolicy:
    DependsOn: QueryIsOpenFunctionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: queryIsOpenFunctionRolePolicy_biz
      Roles:
        - !Ref QueryIsOpenFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ds:DescribeDirectories
              - connect:DescribeInstance
              - dynamodb:query
            Resource:
              - "*"
              - "arn:aws:logs:ap-northeast-1:アカウントID:*"
              - "arn:aws:connect:ap-northeast-1:アカウントID:instance/インスタンスID"
              - "arn:aws:dynamodb:ap-northeast-1:アカウントID:table/テーブル名"
Outputs:
  QueryIsOpenFunctionArn:
    Value: !GetAtt QueryIsOpenFunction.Arn
  QueryIsOpenFunctionName:
    Value: !Ref QueryIsOpenFunction